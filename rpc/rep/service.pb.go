// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/rep/service.proto

/*
Package rep is a generated protocol buffer package.

It is generated from these files:
	rpc/rep/service.proto

It has these top-level messages:
	VoteReq
	VoteResp
	VotesReq
	VotesResp
	VoteRecord
*/
package rep

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ericmoritz_users "github.com/ericmoritz/twirp-users/rpc/users"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// /////////////////////////////////////////////////////////////////////////////
// Vote() rpc
// /////////////////////////////////////////////////////////////////////////////
type VoteReq struct {
	// This request requires a valid users.Session, this is acquired by calling the Users.Login() rpc
	Session *ericmoritz_users.Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Target  string                    `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
}

func (m *VoteReq) Reset()                    { *m = VoteReq{} }
func (m *VoteReq) String() string            { return proto.CompactTextString(m) }
func (*VoteReq) ProtoMessage()               {}
func (*VoteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VoteReq) GetSession() *ericmoritz_users.Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *VoteReq) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type VoteResp struct {
}

func (m *VoteResp) Reset()                    { *m = VoteResp{} }
func (m *VoteResp) String() string            { return proto.CompactTextString(m) }
func (*VoteResp) ProtoMessage()               {}
func (*VoteResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// /////////////////////////////////////////////////////////////////////////////
// Votes() rpc
// /////////////////////////////////////////////////////////////////////////////
type VotesReq struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *VotesReq) Reset()                    { *m = VotesReq{} }
func (m *VotesReq) String() string            { return proto.CompactTextString(m) }
func (*VotesReq) ProtoMessage()               {}
func (*VotesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VotesReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type VotesResp struct {
	Count uint64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *VotesResp) Reset()                    { *m = VotesResp{} }
func (m *VotesResp) String() string            { return proto.CompactTextString(m) }
func (*VotesResp) ProtoMessage()               {}
func (*VotesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VotesResp) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// Internal
// /////////////////////////////////////////////////////////////////////////////
type VoteRecord struct {
	UUID   string `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Target string `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
}

func (m *VoteRecord) Reset()                    { *m = VoteRecord{} }
func (m *VoteRecord) String() string            { return proto.CompactTextString(m) }
func (*VoteRecord) ProtoMessage()               {}
func (*VoteRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VoteRecord) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VoteRecord) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *VoteRecord) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func init() {
	proto.RegisterType((*VoteReq)(nil), "ericmoritz.rep.VoteReq")
	proto.RegisterType((*VoteResp)(nil), "ericmoritz.rep.VoteResp")
	proto.RegisterType((*VotesReq)(nil), "ericmoritz.rep.VotesReq")
	proto.RegisterType((*VotesResp)(nil), "ericmoritz.rep.VotesResp")
	proto.RegisterType((*VoteRecord)(nil), "ericmoritz.rep.VoteRecord")
}

func init() { proto.RegisterFile("rpc/rep/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbb, 0x4f, 0x33, 0x31,
	0x10, 0xc4, 0x95, 0x2f, 0xef, 0xfd, 0x24, 0x0a, 0x8b, 0xc7, 0xe5, 0xaa, 0x70, 0x05, 0x4a, 0x83,
	0x4f, 0x4a, 0xaa, 0x48, 0x54, 0x88, 0x86, 0x0e, 0x19, 0x25, 0x05, 0x5d, 0x62, 0x56, 0xc1, 0xc5,
	0x9d, 0xcd, 0xae, 0x0f, 0x24, 0x0a, 0xfe, 0x76, 0x64, 0xfb, 0x78, 0x44, 0x4a, 0xba, 0x1d, 0xed,
	0xdc, 0x6f, 0xe6, 0xd6, 0x70, 0x46, 0x4e, 0x97, 0x84, 0xae, 0x64, 0xa4, 0x37, 0xa3, 0x51, 0x3a,
	0xb2, 0xde, 0x8a, 0x13, 0x24, 0xa3, 0x2b, 0x4b, 0xc6, 0x7f, 0x48, 0x42, 0x97, 0x2f, 0x77, 0xc6,
	0xbf, 0x34, 0x5b, 0xa9, 0x6d, 0x55, 0xfe, 0xae, 0x4a, 0xff, 0x6e, 0xc8, 0x5d, 0x37, 0x8c, 0xc4,
	0x65, 0x00, 0xa5, 0x69, 0x0f, 0x55, 0xac, 0x61, 0xb8, 0xb6, 0x1e, 0x15, 0xbe, 0x8a, 0x05, 0x0c,
	0x19, 0x99, 0x8d, 0xad, 0xb3, 0xce, 0xb4, 0x33, 0xfb, 0x3f, 0x9f, 0xc8, 0x3f, 0x39, 0xf1, 0x63,
	0xf9, 0x98, 0x0c, 0xea, 0xdb, 0x29, 0xce, 0x61, 0xe0, 0x37, 0xb4, 0x43, 0x9f, 0x75, 0xa7, 0x9d,
	0xd9, 0x58, 0xb5, 0xaa, 0x00, 0x18, 0x25, 0x2e, 0xbb, 0xe2, 0x2a, 0xcd, 0x1c, 0x42, 0x72, 0x18,
	0x05, 0x52, 0xbd, 0xa9, 0x30, 0xa6, 0x8c, 0xd5, 0x8f, 0x2e, 0x2e, 0x61, 0xdc, 0xfa, 0xd8, 0x89,
	0x53, 0xe8, 0x6b, 0xdb, 0xd4, 0x3e, 0xba, 0x7a, 0x2a, 0x89, 0xe2, 0x01, 0x20, 0x61, 0xb5, 0xa5,
	0x67, 0x21, 0xa0, 0xb7, 0x5a, 0xdd, 0xdf, 0xb5, 0xa0, 0x38, 0x87, 0x42, 0x6c, 0x1b, 0xd2, 0x98,
	0xfd, 0x4b, 0x85, 0x92, 0x3a, 0x56, 0x74, 0xfe, 0x09, 0x5d, 0x85, 0x4e, 0x2c, 0xa1, 0x17, 0xc0,
	0xe2, 0x42, 0xee, 0xdf, 0x56, 0xb6, 0xd7, 0xc9, 0xb3, 0xc3, 0x0b, 0x76, 0xe2, 0x06, 0xfa, 0xb1,
	0xb6, 0x38, 0x68, 0x09, 0x7f, 0x9d, 0x4f, 0x8e, 0x6c, 0xd8, 0xdd, 0xf6, 0x9f, 0xba, 0x84, 0x6e,
	0x3b, 0x88, 0xcf, 0xb1, 0xf8, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x00, 0xf6, 0x60, 0x85, 0xf2, 0x01,
	0x00, 0x00,
}
